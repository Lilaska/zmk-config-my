/*
 * Copyright (c) 2023 Andrei Gaevskii
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <200>; };

&mt { quick_tap_ms = <200>; };

&gresc {
};

/ {
    behaviors {
        shiftmod_par: shiftmod_par {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFTMOD_PAR";
            bindings = <&kp LPAR>, <&kp RPAR>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        brace_mod_behavior: brace_mod_behavior {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACE_MOD_BEHAVIOR";
            bindings = <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bracket_shiftmod: bracket_shiftmod {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACKET_SHIFTMOD";
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
        &kp PLUS   &kp EXCLAMATION  &kp AT_SIGN  &kp DLLR        &kp HASH   &kp PERCENT    &kp QMARK  &kp AMPS       &kp STAR   &shiftmod_par    &brace_mod_behavior  &kp MINUS
&tog 4  &kp EQUAL  &kp Q            &kp W        &kp E           &kp R      &kp T          &kp Y      &kp U          &kp I      &kp O            &kp SEMICOLON        &bracket_shiftmod  &kp CLCK
        &kp TAB    &kp A            &kp S        &kp D           &kp F      &kp G          &kp H      &kp J          &kp K      &kp L            &kp P                &mt RCTRL SQT
        &kp RCTRL  &kp Z            &kp X        &kp C           &kp V      &kp B          &kp N      &kp M          &kp COMMA  &kp DOT          &kp FSLH             &kp RIGHT_CONTROL
                                    &kp LALT     &kp LEFT_SHIFT  &kp SPACE  &lt 2 ENTER    &lt 1 ESC  &kp BACKSPACE  &lt 2 DEL  &kp RIGHT_SHIFT
            >;
        };

        lower_layer {
            bindings = <
        &trans          &trans    &trans  &trans     &trans    &trans       &trans         &trans  &trans     &trans    &trans    &trans
&trans  &kp UNDER       &kp F1    &kp F2  &kp F3     &kp F4    &kp F5       &kp F6         &kp F7  &kp F8     &kp F9    &kp F10   &kp F11          &mt RGUI F12
        &mt LCTRL PLUS  &kp EXCL  &kp AT  &kp HASH   &kp DLLR  &kp PRCNT    &kp LESS_THAN  &kp GT  &kp PIPE   &kp LPAR  &kp RPAR  &mt RCTRL MINUS
        &mt LALT EQUAL  &kp N1    &kp N2  &kp N3     &kp N4    &kp N5       &kp N6         &kp N7  &kp N8     &kp N9    &kp N0    &trans
                                  &trans  &lt 3 TAB  &trans    &trans       &trans         &trans  &lt 3 DEL  &trans
            >;
        };

        raise_layer {
            bindings = <
                        &trans           &trans           &trans     &trans            &trans       &trans                &trans         &trans    &trans     &trans     &trans           &trans
&mt LA(LEFT_SHIFT) END  &kp KP_NUM       &kp KP_SLASH     &kp KP_N7  &kp LC(TAB)       &kp LA(TAB)  &kp LC(Y)             &kp LC(LA(A))  &kp HOME  &kp PSCRN  &kp PG_UP  &kp SLCK         &kp CAPS         &trans
                        &mt LCTRL EQUAL  &kp KP_MULTIPLY  &kp KP_N4  &kp LC(LEFT_ALT)  &kp LC(W)    &kp LC(LEFT_SHIFT)    &kp C_MUTE     &kp LEFT  &kp UP     &kp RIGHT  &kp INS          &mt RCTRL K_APP
                        &kp LS(LC(Z))    &kp LC(Z)        &kp KP_N1  &kp LA(F1)        &kp LC(S)    &kp LA(INS)           &kp LA(LC(S))  &kp END   &kp DOWN   &kp PG_DN  &kp PAUSE_BREAK  &trans
                                                          &trans     &trans            &trans       &lt 3 RET             &lt 3 ESC      &trans    &trans     &trans
            >;
        };

        adjust_layer {
            bindings = <
       &none        &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &none
&none  &bootloader  &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &bootloader  &none
       &bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
       &sys_reset   &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &sys_reset
                                  &none         &trans        &none         &trans          &trans        &none         &trans        &none
            >;
        };

        rus {
            bindings = <
        &trans  &trans  &trans  &trans  &trans     &trans               &trans           &trans         &trans     &trans   &trans         &trans
&tog 4  &trans  &kp Q   &kp W   &kp T   &kp R      &kp E                &kp Y            &kp U          &kp I      &kp O    &kp P          &kp LEFT_BRACKET  &kp CLCK
        &trans  &kp A   &kp S   &kp D   &kp F      &kp G                &kp H            &kp J          &kp K      &kp L    &kp SEMICOLON  &kp SQT
        &trans  &kp Z   &kp X   &kp C   &kp V      &kp B                &kp N            &kp M          &kp COMMA  &kp DOT  &trans         &trans
                        &trans  &trans  &kp SPACE  &mt LSHIFT ESCAPE    &mt RCTRL ENTER  &kp BACKSPACE  &trans     &trans
            >;
        };
    };
};
